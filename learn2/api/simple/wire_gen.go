// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package simple

import (
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeService(isError bool) (*SimpleService, error) {
	simpleRepository := NewSimpleRepository(isError)
	simpleService, err := NewSimpleService(simpleRepository)
	if err != nil {
		return nil, err
	}
	return simpleService, nil
}

func InitializeDatabaseRepository() *DatabaseRepository {
	databaseMysql := NewDatabaseMysql()
	databasePostgres := NewDatabasePostgres()
	databaseRepository := NewDatabaseRepository(databaseMysql, databasePostgres)
	return databaseRepository
}

func InitializeFooBarService() *FooBarService {
	fooRepository := NewFooRepository()
	fooService := NewFooService(fooRepository)
	barRepository := NewBarRepository()
	barService := NewBarService(barRepository)
	fooBarService := NewFooBarService(fooService, barService)
	return fooBarService
}

func InitializeHelloService() *HelloService {
	sayHello := NewSayHello()
	helloService := NewSayHelloService(sayHello)
	return helloService
}

// cleanup
func InitializeConnection(name string) (*Connection, func()) {
	file, cleanup := NewFile(name)
	connection, cleanup2 := NewConnection(file)
	return connection, func() {
		cleanup2()
		cleanup()
	}
}

// injector.go:

// grouping set
var fooSet = wire.NewSet(NewFooRepository, NewFooService)

var barSet = wire.NewSet(NewBarRepository, NewBarService)

// binding interface
var helloSet = wire.NewSet(NewSayHello, wire.Bind(new(SayHelloInterface), new(*SayHello)))
